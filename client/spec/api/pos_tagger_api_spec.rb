=begin
#nlpapiv2

#The powerful Natural Language Processing APIs (v2) let you perform part of speech tagging, entity identification, sentence parsing, and much more to help you understand the meaning of unstructured text.

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'spec_helper'
require 'json'

# Unit tests for CloudmersiveNlpApiClient::PosTaggerApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'PosTaggerApi' do
  before do
    # run before each test
    @instance = CloudmersiveNlpApiClient::PosTaggerApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of PosTaggerApi' do
    it 'should create an instance of PosTaggerApi' do
      expect(@instance).to be_instance_of(CloudmersiveNlpApiClient::PosTaggerApi)
    end
  end

  # unit tests for pos_tagger_tag_adjectives
  # Part-of-speech tag a string, filter to adjectives
  # Part-of-speech (POS) tag a string, find the adjectives, and return result as JSON
  # @param request Input string
  # @param [Hash] opts the optional parameters
  # @return [PosResponse]
  describe 'pos_tagger_tag_adjectives test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for pos_tagger_tag_adverbs
  # Part-of-speech tag a string, filter to adverbs
  # Part-of-speech (POS) tag a string, find the adverbs, and return result as JSON
  # @param request Input string
  # @param [Hash] opts the optional parameters
  # @return [PosResponse]
  describe 'pos_tagger_tag_adverbs test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for pos_tagger_tag_nouns
  # Part-of-speech tag a string, filter to nouns
  # Part-of-speech (POS) tag a string, find the nouns, and return result as JSON
  # @param request Input string
  # @param [Hash] opts the optional parameters
  # @return [PosResponse]
  describe 'pos_tagger_tag_nouns test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for pos_tagger_tag_pronouns
  # Part-of-speech tag a string, filter to pronouns
  # Part-of-speech (POS) tag a string, find the pronouns, and return result as JSON
  # @param request Input string
  # @param [Hash] opts the optional parameters
  # @return [PosResponse]
  describe 'pos_tagger_tag_pronouns test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for pos_tagger_tag_sentence
  # Part-of-speech tag a string
  # Part-of-speech (POS) tag a string and return result as JSON
  # @param request Input string
  # @param [Hash] opts the optional parameters
  # @return [PosResponse]
  describe 'pos_tagger_tag_sentence test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for pos_tagger_tag_verbs
  # Part-of-speech tag a string, filter to verbs
  # Part-of-speech (POS) tag a string, find the verbs, and return result as JSON
  # @param request Input string
  # @param [Hash] opts the optional parameters
  # @return [PosResponse]
  describe 'pos_tagger_tag_verbs test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
