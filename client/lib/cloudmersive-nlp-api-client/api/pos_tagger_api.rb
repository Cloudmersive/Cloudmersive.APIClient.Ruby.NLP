=begin
#nlpapiv2

#The powerful Natural Language Processing APIs (v2) let you perform part of speech tagging, entity identification, sentence parsing, and much more to help you understand the meaning of unstructured text.

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module CloudmersiveNlpApiClient
  class PosTaggerApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Part-of-speech tag a string, filter to adjectives
    # Part-of-speech (POS) tag a string, find the adjectives, and return result as JSON
    # @param request Input string
    # @param [Hash] opts the optional parameters
    # @return [PosResponse]
    def pos_tagger_tag_adjectives(request, opts = {})
      data, _status_code, _headers = pos_tagger_tag_adjectives_with_http_info(request, opts)
      return data
    end

    # Part-of-speech tag a string, filter to adjectives
    # Part-of-speech (POS) tag a string, find the adjectives, and return result as JSON
    # @param request Input string
    # @param [Hash] opts the optional parameters
    # @return [Array<(PosResponse, Fixnum, Hash)>] PosResponse data, response status code and response headers
    def pos_tagger_tag_adjectives_with_http_info(request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PosTaggerApi.pos_tagger_tag_adjectives ..."
      end
      # verify the required parameter 'request' is set
      if @api_client.config.client_side_validation && request.nil?
        fail ArgumentError, "Missing the required parameter 'request' when calling PosTaggerApi.pos_tagger_tag_adjectives"
      end
      # resource path
      local_var_path = "/nlp-v2/pos/tag/adjectives"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PosResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PosTaggerApi#pos_tagger_tag_adjectives\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Part-of-speech tag a string, filter to adverbs
    # Part-of-speech (POS) tag a string, find the adverbs, and return result as JSON
    # @param request Input string
    # @param [Hash] opts the optional parameters
    # @return [PosResponse]
    def pos_tagger_tag_adverbs(request, opts = {})
      data, _status_code, _headers = pos_tagger_tag_adverbs_with_http_info(request, opts)
      return data
    end

    # Part-of-speech tag a string, filter to adverbs
    # Part-of-speech (POS) tag a string, find the adverbs, and return result as JSON
    # @param request Input string
    # @param [Hash] opts the optional parameters
    # @return [Array<(PosResponse, Fixnum, Hash)>] PosResponse data, response status code and response headers
    def pos_tagger_tag_adverbs_with_http_info(request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PosTaggerApi.pos_tagger_tag_adverbs ..."
      end
      # verify the required parameter 'request' is set
      if @api_client.config.client_side_validation && request.nil?
        fail ArgumentError, "Missing the required parameter 'request' when calling PosTaggerApi.pos_tagger_tag_adverbs"
      end
      # resource path
      local_var_path = "/nlp-v2/pos/tag/adverbs"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PosResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PosTaggerApi#pos_tagger_tag_adverbs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Part-of-speech tag a string, filter to nouns
    # Part-of-speech (POS) tag a string, find the nouns, and return result as JSON
    # @param request Input string
    # @param [Hash] opts the optional parameters
    # @return [PosResponse]
    def pos_tagger_tag_nouns(request, opts = {})
      data, _status_code, _headers = pos_tagger_tag_nouns_with_http_info(request, opts)
      return data
    end

    # Part-of-speech tag a string, filter to nouns
    # Part-of-speech (POS) tag a string, find the nouns, and return result as JSON
    # @param request Input string
    # @param [Hash] opts the optional parameters
    # @return [Array<(PosResponse, Fixnum, Hash)>] PosResponse data, response status code and response headers
    def pos_tagger_tag_nouns_with_http_info(request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PosTaggerApi.pos_tagger_tag_nouns ..."
      end
      # verify the required parameter 'request' is set
      if @api_client.config.client_side_validation && request.nil?
        fail ArgumentError, "Missing the required parameter 'request' when calling PosTaggerApi.pos_tagger_tag_nouns"
      end
      # resource path
      local_var_path = "/nlp-v2/pos/tag/nouns"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PosResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PosTaggerApi#pos_tagger_tag_nouns\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Part-of-speech tag a string, filter to pronouns
    # Part-of-speech (POS) tag a string, find the pronouns, and return result as JSON
    # @param request Input string
    # @param [Hash] opts the optional parameters
    # @return [PosResponse]
    def pos_tagger_tag_pronouns(request, opts = {})
      data, _status_code, _headers = pos_tagger_tag_pronouns_with_http_info(request, opts)
      return data
    end

    # Part-of-speech tag a string, filter to pronouns
    # Part-of-speech (POS) tag a string, find the pronouns, and return result as JSON
    # @param request Input string
    # @param [Hash] opts the optional parameters
    # @return [Array<(PosResponse, Fixnum, Hash)>] PosResponse data, response status code and response headers
    def pos_tagger_tag_pronouns_with_http_info(request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PosTaggerApi.pos_tagger_tag_pronouns ..."
      end
      # verify the required parameter 'request' is set
      if @api_client.config.client_side_validation && request.nil?
        fail ArgumentError, "Missing the required parameter 'request' when calling PosTaggerApi.pos_tagger_tag_pronouns"
      end
      # resource path
      local_var_path = "/nlp-v2/pos/tag/pronouns"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PosResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PosTaggerApi#pos_tagger_tag_pronouns\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Part-of-speech tag a string
    # Part-of-speech (POS) tag a string and return result as JSON
    # @param request Input string
    # @param [Hash] opts the optional parameters
    # @return [PosResponse]
    def pos_tagger_tag_sentence(request, opts = {})
      data, _status_code, _headers = pos_tagger_tag_sentence_with_http_info(request, opts)
      return data
    end

    # Part-of-speech tag a string
    # Part-of-speech (POS) tag a string and return result as JSON
    # @param request Input string
    # @param [Hash] opts the optional parameters
    # @return [Array<(PosResponse, Fixnum, Hash)>] PosResponse data, response status code and response headers
    def pos_tagger_tag_sentence_with_http_info(request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PosTaggerApi.pos_tagger_tag_sentence ..."
      end
      # verify the required parameter 'request' is set
      if @api_client.config.client_side_validation && request.nil?
        fail ArgumentError, "Missing the required parameter 'request' when calling PosTaggerApi.pos_tagger_tag_sentence"
      end
      # resource path
      local_var_path = "/nlp-v2/pos/tag/sentence"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PosResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PosTaggerApi#pos_tagger_tag_sentence\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Part-of-speech tag a string, filter to verbs
    # Part-of-speech (POS) tag a string, find the verbs, and return result as JSON
    # @param request Input string
    # @param [Hash] opts the optional parameters
    # @return [PosResponse]
    def pos_tagger_tag_verbs(request, opts = {})
      data, _status_code, _headers = pos_tagger_tag_verbs_with_http_info(request, opts)
      return data
    end

    # Part-of-speech tag a string, filter to verbs
    # Part-of-speech (POS) tag a string, find the verbs, and return result as JSON
    # @param request Input string
    # @param [Hash] opts the optional parameters
    # @return [Array<(PosResponse, Fixnum, Hash)>] PosResponse data, response status code and response headers
    def pos_tagger_tag_verbs_with_http_info(request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PosTaggerApi.pos_tagger_tag_verbs ..."
      end
      # verify the required parameter 'request' is set
      if @api_client.config.client_side_validation && request.nil?
        fail ArgumentError, "Missing the required parameter 'request' when calling PosTaggerApi.pos_tagger_tag_verbs"
      end
      # resource path
      local_var_path = "/nlp-v2/pos/tag/verbs"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PosResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PosTaggerApi#pos_tagger_tag_verbs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
