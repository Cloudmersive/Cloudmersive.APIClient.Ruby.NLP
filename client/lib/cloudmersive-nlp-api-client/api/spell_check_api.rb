=begin
#nlpapi

#The powerful Natural Language Processing APIs let you perform part of speech tagging, entity identification, sentence parsing, and much more to help you understand the meaning of unstructured text.

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: unset

=end

require "uri"

module CloudmersiveNlpApiClient
  class SpellCheckApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Spell check word
    # Spell check a word as JSON
    # @param value Input sentence
    # @param [Hash] opts the optional parameters
    # @return [CheckJsonResponse]
    def spell_check_check_json(value, opts = {})
      data, _status_code, _headers = spell_check_check_json_with_http_info(value, opts)
      return data
    end

    # Spell check word
    # Spell check a word as JSON
    # @param value Input sentence
    # @param [Hash] opts the optional parameters
    # @return [Array<(CheckJsonResponse, Fixnum, Hash)>] CheckJsonResponse data, response status code and response headers
    def spell_check_check_json_with_http_info(value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SpellCheckApi.spell_check_check_json ..."
      end
      # verify the required parameter 'value' is set
      if @api_client.config.client_side_validation && value.nil?
        fail ArgumentError, "Missing the required parameter 'value' when calling SpellCheckApi.spell_check_check_json"
      end
      # resource path
      local_var_path = "/nlp/spellcheck/check/word/json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(value)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CheckJsonResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SpellCheckApi#spell_check_check_json\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Check if sentence is spelled correctly
    # Checks whether the sentence is spelled correctly and returns the result as JSON
    # @param value Input sentence
    # @param [Hash] opts the optional parameters
    # @return [CheckSentenceJsonResponse]
    def spell_check_check_sentence_json(value, opts = {})
      data, _status_code, _headers = spell_check_check_sentence_json_with_http_info(value, opts)
      return data
    end

    # Check if sentence is spelled correctly
    # Checks whether the sentence is spelled correctly and returns the result as JSON
    # @param value Input sentence
    # @param [Hash] opts the optional parameters
    # @return [Array<(CheckSentenceJsonResponse, Fixnum, Hash)>] CheckSentenceJsonResponse data, response status code and response headers
    def spell_check_check_sentence_json_with_http_info(value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SpellCheckApi.spell_check_check_sentence_json ..."
      end
      # verify the required parameter 'value' is set
      if @api_client.config.client_side_validation && value.nil?
        fail ArgumentError, "Missing the required parameter 'value' when calling SpellCheckApi.spell_check_check_sentence_json"
      end
      # resource path
      local_var_path = "/nlp/spellcheck/check/sentence/json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(value)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CheckSentenceJsonResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SpellCheckApi#spell_check_check_sentence_json\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Spell check a sentence
    # Check if a sentence is spelled correctly
    # @param value Input sentence word
    # @param [Hash] opts the optional parameters
    # @return [BOOLEAN]
    def spell_check_check_sentence_string(value, opts = {})
      data, _status_code, _headers = spell_check_check_sentence_string_with_http_info(value, opts)
      return data
    end

    # Spell check a sentence
    # Check if a sentence is spelled correctly
    # @param value Input sentence word
    # @param [Hash] opts the optional parameters
    # @return [Array<(BOOLEAN, Fixnum, Hash)>] BOOLEAN data, response status code and response headers
    def spell_check_check_sentence_string_with_http_info(value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SpellCheckApi.spell_check_check_sentence_string ..."
      end
      # verify the required parameter 'value' is set
      if @api_client.config.client_side_validation && value.nil?
        fail ArgumentError, "Missing the required parameter 'value' when calling SpellCheckApi.spell_check_check_sentence_string"
      end
      # resource path
      local_var_path = "/nlp/spellcheck/check/sentence/string"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(value)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BOOLEAN')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SpellCheckApi#spell_check_check_sentence_string\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Find spelling corrections
    # Find the spelling corrections for a word
    # @param value Input word
    # @param [Hash] opts the optional parameters
    # @return [String]
    def spell_check_correct(value, opts = {})
      data, _status_code, _headers = spell_check_correct_with_http_info(value, opts)
      return data
    end

    # Find spelling corrections
    # Find the spelling corrections for a word
    # @param value Input word
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def spell_check_correct_with_http_info(value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SpellCheckApi.spell_check_correct ..."
      end
      # verify the required parameter 'value' is set
      if @api_client.config.client_side_validation && value.nil?
        fail ArgumentError, "Missing the required parameter 'value' when calling SpellCheckApi.spell_check_correct"
      end
      # resource path
      local_var_path = "/nlp/spellcheck/correct/word/string"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(value)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SpellCheckApi#spell_check_correct\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Find spelling corrections
    # Find spelling correction suggestions and return result as JSON
    # @param value Input string
    # @param [Hash] opts the optional parameters
    # @return [CorrectJsonResponse]
    def spell_check_correct_json(value, opts = {})
      data, _status_code, _headers = spell_check_correct_json_with_http_info(value, opts)
      return data
    end

    # Find spelling corrections
    # Find spelling correction suggestions and return result as JSON
    # @param value Input string
    # @param [Hash] opts the optional parameters
    # @return [Array<(CorrectJsonResponse, Fixnum, Hash)>] CorrectJsonResponse data, response status code and response headers
    def spell_check_correct_json_with_http_info(value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SpellCheckApi.spell_check_correct_json ..."
      end
      # verify the required parameter 'value' is set
      if @api_client.config.client_side_validation && value.nil?
        fail ArgumentError, "Missing the required parameter 'value' when calling SpellCheckApi.spell_check_correct_json"
      end
      # resource path
      local_var_path = "/nlp/spellcheck/correct/word/json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(value)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CorrectJsonResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SpellCheckApi#spell_check_correct_json\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Spell check a word
    # Check if a word is spelled correctly
    # @param value Input string word
    # @param [Hash] opts the optional parameters
    # @return [BOOLEAN]
    def spell_check_post(value, opts = {})
      data, _status_code, _headers = spell_check_post_with_http_info(value, opts)
      return data
    end

    # Spell check a word
    # Check if a word is spelled correctly
    # @param value Input string word
    # @param [Hash] opts the optional parameters
    # @return [Array<(BOOLEAN, Fixnum, Hash)>] BOOLEAN data, response status code and response headers
    def spell_check_post_with_http_info(value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SpellCheckApi.spell_check_post ..."
      end
      # verify the required parameter 'value' is set
      if @api_client.config.client_side_validation && value.nil?
        fail ArgumentError, "Missing the required parameter 'value' when calling SpellCheckApi.spell_check_post"
      end
      # resource path
      local_var_path = "/nlp/spellcheck/check/word/string"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(value)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BOOLEAN')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SpellCheckApi#spell_check_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
